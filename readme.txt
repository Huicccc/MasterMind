    In the beginning, I wanted to write code producelly and use instances
generated by Marble and all other helper class as variables inside the
functions. After coding separate parts, I've tried to use higher-order
functions to pass all variables between functions. But I couldn't do it without
using global variables, and then I realized the OOD was the perfect solution
for this. This whole journey of exploring and coding was enjoyable.

    Rules of Mastermind:
        Guess 4 color from 6 colors with right position, you win if you guess
    less 10 times, otherwise you lose. 

    How to play? 
        1. Run mastermind_game.py
        2. Enter your name (10 best player will show on leaderboard!)
        3. Click colored marbles to guess color
        4. Click check button to check answer: bulls(right color and position)
    are black, cows(rigt color but wrong position) are red.
        5. Click reset button to reset guess
        6. If you lose, right answer will show in 2 seconds, then click quit
    button to quit game.
        7. If you win the game, window will close after 2 seconds.
    
    The game logic and responding file, class or function (aka.func) are as
followings:
    
    1. setup gameboard (class: Setup, file: Setup.py) steps:
        1) 800 * 700 blank screen (func: screen_setup)
        2) popout window to put user name (func: name_setup)
        3) draw 3 rectangles using Rectangle class (Rectanlge.py)
    (func: rectangle_setup)
        4) create message dictionary using Gif class (Gif.py)(func: msg_setup)
        5) draw leaderboard and handle exception (func: leader_setup)
            a) read file and draw leaderboard using Leader class (Leader.py)
        (func: load_file)
            b) handle exception: show error gif for 2s, and save error
        (func: save_error)
        6) create button dictionary using Gif class (Gif.py)
    (func: button_setup)
        7) create 3 lists for 3 different kinds of marbles using Marble class
    (Marble.py) (func: marble_standard_setup, marble_setup)
        8) create a turtle pen pointing current guessing row.

    2. play game (class: Game, file: Game.py) structure:
        - create answer (func: answer_setup, file: secret_code.py)
        - execute onclick (func: check)
            - strategy (func: get_click)
                - quit - (func: close_window)
                or - reset - (func: close_window)
                or - check
                       - guess list (func: get_guess_color)
                       - count bulls and cows (func: count_bulls_and_cows,
                                            file: secret_code.py)
                       - draw result marbles (func: draw_bulls_and_cows)
                           - win - (func: save_leader)
                           - or lose - show answer
                           - or continue
                or - guess color
                    
    Appendix:
        I. Class file
            1. main file:
                1) Setup.py - Setup
                2) Game.py - Game
            2. helper class:
                1) Rectanlge.py - Rectangle
                2) Gif.py - Gif
                3) Leader.py - Leader
                4) Marble.py - Marble
                5) Point.py - Point
            3. test class: test_mastermind_game.py - MastermindTest
        II. Function file
            1. main file: mastermind_game.py
            2. helper file: secret_code.py
        III. Other file
            1. constants file: Constants.py
            2. recording file:
                1) mastermind_errors.err
                2) leaderboard.txt (not submitted)    
            3. gif file:
                1) button gif: checkbutton.gif, quit.gif, xbutton.gif
                2) message gif: leaderboard_error.gif, lose.gif, quitmsg.gif,
                winner.gif
